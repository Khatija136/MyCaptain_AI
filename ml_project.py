# -*- coding: utf-8 -*-
"""ML Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ITMv9d0XkFX46eGG1AEYr5-sbMbrD9tt
"""

from google.colab import files
import pandas as pd
uploaded = files.upload()

iris_df = pd.read_csv(next(iter(uploaded)))
print(iris_df.head())

from google.colab import files
import pandas as pd
uploaded = files.upload()

diabetes_df = pd.read_csv(next(iter(uploaded)))
print(diabetes_df.head())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris, load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, classification_report, confusion_matrix
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor, plot_tree
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.svm import SVC, SVR
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor

#load the iris dataset (for classification models)
iris = load_iris()
X_cls = iris.data
y_cls = iris.target

#load the diabetes dataset (for regression models)
diabetes = load_diabetes()
X_reg = diabetes.data
y_reg = diabetes.target

#split the data for classification
X_cls_train, X_cls_test, y_cls_train, y_cls_test = train_test_split(X_cls, y_cls, test_size=0.2, random_state=42)

#split the data for regression
X_reg_train, X_reg_test, y_reg_train, y_reg_test = train_test_split(X_reg, y_reg, test_size=0.2, random_state=42)

#model 1: logistic regression (classification)
model_logistic = LogisticRegression()
model_logistic.fit(X_cls_train, y_cls_train)
logistic_predictions = model_logistic.predict(X_cls_test)

#model 2: linear regression (regression)
model_linear = LinearRegression()
model_linear.fit (X_reg_train, y_reg_train)
linear_predictions = model_linear.predict(X_reg_test)

#model 3: decision tress (classification)
model_dt_cls = DecisionTreeClassifier()
model_dt_cls.fit(X_cls_train, y_cls_train)
dt_cls_predictions = model_dt_cls.predict(X_cls_test)

#model 4: random forest (classification)
model_rf_cls = RandomForestClassifier()
model_rf_cls.fit(X_cls_train, y_cls_train)
rf_cls_predictions = model_rf_cls.predict(X_cls_test)

#model 5: support vector machine (svm) (classification)
model_svm_cls = SVC()
model_svm_cls.fit(X_cls_train, y_cls_train)
svm_cls_predictions = model_svm_cls.predict(X_cls_test)

#model 6: k-neares neighbors (KNN) (classification)
model_knn_cls = KNeighborsClassifier()
model_knn_cls.fit(X_cls_train, y_cls_train)
knn_cls_predictions = model_knn_cls.predict(X_cls_test)

# Model 3: Decision Tree (Regression)
model_dt_reg = DecisionTreeRegressor()
model_dt_reg.fit(X_reg_train, y_reg_train)
dt_reg_predictions = model_dt_reg.predict(X_reg_test)

# Model 4: Random Forest (Regression)
model_rf_reg = RandomForestRegressor()
model_rf_reg.fit(X_reg_train, y_reg_train)
rf_reg_predictions = model_rf_reg.predict(X_reg_test)

# Model 5: Support Vector Machine (SVM) (Regression)
model_svm_reg = SVR()
model_svm_reg.fit(X_reg_train, y_reg_train)
svm_reg_predictions = model_svm_reg.predict(X_reg_test)

# Model 6: K-Nearest Neighbors (KNN) (Regression)
model_knn_reg = KNeighborsRegressor()
model_knn_reg.fit(X_reg_train, y_reg_train)
knn_reg_predictions = model_knn_reg.predict(X_reg_test)

# Evaluate and visualize the models
# For classification models
print("Logistic Regression Accuracy:", accuracy_score(y_cls_test, logistic_predictions))
print("Decision Tree Classification Report:\n", classification_report(y_cls_test, dt_cls_predictions))
print("Random Forest Confusion Matrix:\n", confusion_matrix(y_cls_test, rf_cls_predictions))

# For regression models
print("Linear Regression Mean Squared Error:", mean_squared_error(y_reg_test, linear_predictions))
print("Decision Tree Regression Mean Squared Error:", mean_squared_error(y_reg_test, dt_reg_predictions))

# Visualize Decision Tree (Classification)
plt.figure(figsize=(12, 8))
plot_tree(model_dt_cls, feature_names=iris.feature_names, class_names=iris.target_names, filled=True)
plt.show()

# Visualize Linear Regression (Regression)
plt.figure(figsize=(10, 6))
plt.scatter(y_reg_test, linear_predictions, color='blue')
plt.plot([y_reg.min(), y_reg.max()], [y_reg.min(), y_reg.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Linear Regression Predictions vs Actual')
plt.show()